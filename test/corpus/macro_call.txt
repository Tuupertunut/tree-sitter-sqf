==================
Valid 1 argument macro call
==================

GVAR(abc)

------------------

(source_file
  (code
    (statement
      (expression
        (macro_call
          (variable)
          (macro_call_arguments
            (macro_call_argument)))))))

==================
Valid 1 empty argument macro call
==================

MACRO()

------------------

(source_file
  (code
    (statement
      (expression
        (macro_call
          (variable)
          (macro_call_arguments
            (macro_call_argument)))))))

==================
Valid 3 argument macro call
==================

CONCAT(abc,def,ghi);

------------------

(source_file
  (code
    (statement
      (expression
        (macro_call
          (variable)
          (macro_call_arguments
            (macro_call_argument)
            (macro_call_argument)
            (macro_call_argument)))))))

==================
Valid complex macro call and multiplication
==================

w(([3] +z(x(,,,),y())",(") +,""])*(0)

------------------

(source_file
  (code
    (statement
      (expression
        (binary_expression
          (expression
            (macro_call
              (variable)
              (macro_call_arguments
                (macro_call_argument)
                (macro_call_argument))))
          (special_binary_command_7)
          (expression
            (nular_expression
              (parentheses_expression
                (expression
                  (nular_expression
                    (number)))))))))))

==================
Valid macro call in assignment
==================

GVAR(abc) = 234;

------------------

(source_file
  (code
    (statement
      (assignment
        (macro_call
          (variable)
          (macro_call_arguments
            (macro_call_argument)))
        (expression
          (nular_expression
            (number)))))))

==================
Valid macro call as statement
==================

abc = 1;
macro();
abc

------------------

(source_file
  (code
    (statement
      (assignment
        (variable)
        (expression
          (nular_expression
            (number)))))
    (statement
      (expression
        (macro_call
          (variable)
          (macro_call_arguments
            (macro_call_argument)))))
    (statement
      (expression
        (nular_expression
          (variable))))))

==================
Macro call and unary command ambiguity
==================

isPlayer(player);

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (parentheses_expression
                (expression
                  (nular_expression
                    (alphanumeric_nular_command)))))))))))

==================
Macro call and unary command ambiguity
==================

#define isPlayer(a) a == player
isPlayer(player);

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_expression)))
  (code
    (statement
      (expression
        (macro_call
          (variable)
          (macro_call_arguments
            (macro_call_argument)))))))

==================
Macro call does not split
==================

ASSERT_OP(_fish,>,5,"Too few fish!");

------------------

(source_file
  (code
    (statement
      (expression
        (macro_call
          (variable)
          (macro_call_arguments
            (macro_call_argument)
            (macro_call_argument)
            (macro_call_argument)
            (macro_call_argument)))))))

==================
Invalid macro call with space
:error
==================

GVAR (abc)

------------------

==================
Invalid macro call with uneven number of parentheses
:error
==================

GVAR(ab(c)

------------------

==================
Invalid macro call with uneven number of quotes
:error
==================

GVAR(ab"c)

------------------

==================
Valid macro call breaking sqf structure
==================

#define macro(n) [n,
macro(n) 2];

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_expression)))
  (code
    (statement
      (expression
        (macro_call_and_something_else)))))

==================
Valid macro call without arguments breaking sqf structure
==================

#define macro [1,
macro 2];

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression)))
  (code
    (statement
      (expression
        (macro_call_and_something_else)))))

==================
Macro call without arguments and nular command ambiguity
==================

player

------------------

(source_file
  (code
    (statement
      (expression
        (nular_expression
          (alphanumeric_nular_command))))))

==================
Macro call without arguments and nular command ambiguity
==================

#define player unit1
player

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression)))
  (code
    (statement
      (expression
        (nular_expression
          (variable))))))
