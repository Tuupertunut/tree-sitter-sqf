==================
Valid define macro
==================

#define abc 2

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_definition))))

==================
Valid define macro and command
==================

#define abc 2
sin abc

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_definition)))
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid multiline define macro
==================

#define abc isPlayer\
player

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_definition))))

==================
Valid multiline define macro
==================

#define abc isPlayer \
player

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_definition))))

==================
Valid multiline define macro and command
==================

#define abc isPlayer\
player
not abc

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_definition)))
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid indented define macro and command
==================

  #define abc 2
sin abc

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_definition)))
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid define macro after command
==================

sin 30
#define abc 2

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (number)))))))
  (macro
    (define_macro
      (variable)
      (macro_definition))))

==================
Valid define macro after command and empty lines
==================

sin 30


#define abc 2

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (number)))))))
  (macro
    (define_macro
      (variable)
      (macro_definition))))

==================
Valid define macro between commands
==================

sin 30;
#define abc 2
cos abc

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (number))))))
    (macro
      (define_macro
        (variable)
        (macro_definition)))
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid indented define macro between commands
==================

sin 30;
  #define abc 2
cos abc

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (number))))))
    (macro
      (define_macro
        (variable)
        (macro_definition)))
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid define macro inside array
==================

[1,
#define abc 2
2]

------------------

(source_file
  (code
    (statement
      (expression
        (nular_expression
          (array
            (expression
              (nular_expression
                (number)))
            (macro
              (define_macro
                (variable)
                (macro_definition)))
            (expression
              (nular_expression
                (number)))))))))

==================
Invalid define macro after variable
:error
==================

abc #define abc 2

------------------

==================
Invalid define macro with space after hash
:error
==================

# define abc 2

------------------

==================
Invalid indented define macro with space after hash
:error
==================

 # define abc 2

------------------

==================
Invalid define macro with multiple hashes
:error
==================

##define abc 2

------------------

==================
Invalid define macro with comment after hash
:error
==================

#/**/define abc 2

------------------

==================
Invalid define macro with comment before hash
:error
==================

/**/#define abc 2

------------------

==================
Invalid uppercase define macro
:error
==================

#DEFINE abc 2

------------------

==================
Valid 0 argument define macro
==================

#define ab() 5

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments)
      (macro_definition))))

==================
Valid 1 argument define macro
==================

#define ab(cd) 5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_definition))))

==================
Valid 1 argument define macro with trailing comma
==================

#define ab(cd,) 5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_definition))))

==================
Valid 1 argument define macro with spaces and trailing comma
==================

#define ab(  cd  , ) 5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_definition))))

==================
Invalid 1 argument define macro with leading comma
:error
==================

#define ab(,cd) 5 + cd

------------------

==================
Invalid 1 argument define macro with 2 trailing commas
:error
==================

#define ab(cd,,) 5 + cd

------------------

==================
Valid 2 argument define macro
==================

#define ab(cd,ef) 5 + cd * ef

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable))
      (macro_definition))))

==================
Valid 2 argument define macro with no commas
==================

#define ab(cd ef) 5 + cd * ef

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable))
      (macro_definition))))

==================
Valid 2 argument define macro with spaces and trailing comma
==================

#define ab( cd  ,ef ,  ) 5 + cd * ef

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable))
      (macro_definition))))

==================
Invalid 2 argument define macro with 2 commas between
:error
==================

#define ab(cd,,ef) 5 + cd * ef

------------------

==================
Valid 3 argument define macro with mixed spaces and commas
==================

#define ab(cd ef,gh) 5 + cd + ef + gh

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable)
        (variable))
      (macro_definition))))

==================
Invalid 1 argument define macro with space before arguments
==================

#define ab (cd) 5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_definition))))

==================
Valid 1 argument define macro without space after arguments
==================

#define ab(cd)5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_definition))))

==================
Invalid 2 argument define macro with invalid characters
:error
==================

#define ab(cd. ef) 5 + cd + ef

------------------

==================
Macro and command ambiguity
==================

[1,2]#define call func

------------------

(source_file
  (code
    (statement
      (expression
        (binary_expression
          (expression
            (binary_expression
              (expression
                (nular_expression
                  (array
                    (expression
                      (nular_expression
                        (number)))
                    (expression
                      (nular_expression
                        (number))))))
              (special_binary_command_9)
              (expression
                (nular_expression
                  (variable)))))
          (alphanumeric_binary_command_4)
          (expression
            (nular_expression
              (variable))))))))

==================
Macro and command ambiguity
==================

[1,2]
#define call func

------------------

(source_file
  (code
    (statement
      (expression
        (nular_expression
          (array
            (expression
              (nular_expression
                (number)))
            (expression
              (nular_expression
                (number))))))))
  (macro
    (define_macro
      (variable)
      (macro_definition))))