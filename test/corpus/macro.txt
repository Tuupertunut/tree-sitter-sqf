==================
Valid define macro
==================

#define abc 2

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid define macro and command
==================

#define abc 2
sin abc

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression)))
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid multiline define macro
==================

#define abc isPlayer\
player

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid multiline define macro
==================

#define abc isPlayer \
player

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid multiline define macro and command
==================

#define abc isPlayer\
player
not abc

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression)))
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid indented define macro and command
==================

  #define abc 2
sin abc

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression)))
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid define macro after command
==================

sin 30
#define abc 2

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (number)))))))
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid define macro after command and empty lines
==================

sin 30


#define abc 2

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (number)))))))
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid define macro between commands
==================

sin 30;
#define abc 2
cos abc

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (number))))))
    (macro
      (define_macro
        (variable)
        (macro_expression)))
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid indented define macro between commands
==================

sin 30;
  #define abc 2
cos abc

------------------

(source_file
  (code
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (number))))))
    (macro
      (define_macro
        (variable)
        (macro_expression)))
    (statement
      (expression
        (unary_expression
          (alphanumeric_unary_command)
          (expression
            (nular_expression
              (variable))))))))

==================
Valid define macro inside array
==================

[1,
#define abc 2
2]

------------------

(source_file
  (code
    (statement
      (expression
        (nular_expression
          (array
            (expression
              (nular_expression
                (number)))
            (macro
              (define_macro
                (variable)
                (macro_expression)))
            (expression
              (nular_expression
                (number)))))))))

==================
Invalid define macro with no variable
:error
==================

#define

------------------

==================
Valid define macro with empty definition
==================

#define abc

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid define macro with multiple spaces
==================

#define   abc 2

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Invalid define macro with no space
:error
==================

#defineabc 2

------------------

==================
Invalid define macro with newline
:error
==================

#define
abc 2

------------------

==================
Invalid define macro with multiple newlines
:error
==================

#define

abc 2

------------------

==================
Invalid define macro with space and newline
:error
==================

#define 
abc 2

------------------

==================
Invalid define macro with newline and space
:error
==================

#define
 abc 2

------------------

==================
Invalid define macro with escaped newline
:error
==================

#define\
abc 2

------------------

==================
Valid define macro with space and escaped newline
==================

#define \
abc 2

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid define macro with escaped newline and space
==================

#define\
 abc 2

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Invalid multiline define macro
==================

#define abc
2

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression)))
  (code
    (statement
      (expression
        (nular_expression
          (number))))))

==================
Invalid define macro with comment
:error
==================

#define /**/abc 2

------------------

==================
Invalid define macro after variable
:error
==================

abc #define abc 2

------------------

==================
Invalid define macro with space after hash
:error
==================

# define abc 2

------------------

==================
Invalid indented define macro with space after hash
:error
==================

 # define abc 2

------------------

==================
Invalid define macro with multiple hashes
:error
==================

##define abc 2

------------------

==================
Invalid define macro with comment after hash
:error
==================

#/**/define abc 2

------------------

==================
Invalid define macro with comment before hash
:error
==================

/**/#define abc 2

------------------

==================
Invalid uppercase define macro
:error
==================

#DEFINE abc 2

------------------

==================
Valid 0 argument define macro
==================

#define ab() 5

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments)
      (macro_expression))))

==================
Valid 1 argument define macro
==================

#define ab(cd) 5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_expression))))

==================
Valid 1 argument define macro with trailing comma
==================

#define ab(cd,) 5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_expression))))

==================
Valid 1 argument define macro with spaces and trailing comma
==================

#define ab(  cd  , ) 5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_expression))))

==================
Invalid 1 argument define macro with leading comma
:error
==================

#define ab(,cd) 5 + cd

------------------

==================
Invalid 1 argument define macro with 2 trailing commas
:error
==================

#define ab(cd,,) 5 + cd

------------------

==================
Valid 2 argument define macro
==================

#define ab(cd,ef) 5 + cd * ef

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable))
      (macro_expression))))

==================
Valid 2 argument define macro with no commas
==================

#define ab(cd ef) 5 + cd * ef

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable))
      (macro_expression))))

==================
Valid 2 argument define macro with spaces and trailing comma
==================

#define ab( cd  ,ef ,  ) 5 + cd * ef

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable))
      (macro_expression))))

==================
Invalid 2 argument define macro with 2 commas between
:error
==================

#define ab(cd,,ef) 5 + cd * ef

------------------

==================
Valid 3 argument define macro with mixed spaces and commas
==================

#define ab(cd ef,gh) 5 + cd + ef + gh

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable)
        (variable))
      (macro_expression))))

==================
Valid 2 argument define macro with commas, spaces and escaped newlines
==================

#define ab( \
cd\
,ef\
 ) 5 + cd * ef

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable)
        (variable))
      (macro_expression))))

==================
Invalid 2 argument define macro with commas, spaces and escaped newlines
:error
==================

#define ab( \
cd \
 ,ef\
 ) 5 + cd * ef

------------------

==================
Invalid 2 argument define macro with escaped newline
:error
==================

#define ab(cd\
ef) 5 + cd * ef

------------------

==================
Invalid 1 argument define macro with space before arguments
==================

#define ab (cd) 5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid 1 argument define macro without space after arguments
==================

#define ab(cd)5 + cd

------------------

(source_file
  (macro
    (define_macro
      (variable)
      (macro_arguments
        (variable))
      (macro_expression))))

==================
Invalid 2 argument define macro with invalid characters
:error
==================

#define ab(cd. ef) 5 + cd + ef

------------------

==================
Macro and command ambiguity
==================

[1,2]#define call func

------------------

(source_file
  (code
    (statement
      (expression
        (binary_expression
          (expression
            (binary_expression
              (expression
                (nular_expression
                  (array
                    (expression
                      (nular_expression
                        (number)))
                    (expression
                      (nular_expression
                        (number))))))
              (special_binary_command_9)
              (expression
                (nular_expression
                  (variable)))))
          (alphanumeric_binary_command_4)
          (expression
            (nular_expression
              (variable))))))))

==================
Macro and command ambiguity
==================

[1,2]
#define call func

------------------

(source_file
  (code
    (statement
      (expression
        (nular_expression
          (array
            (expression
              (nular_expression
                (number)))
            (expression
              (nular_expression
                (number))))))))
  (macro
    (define_macro
      (variable)
      (macro_expression))))

==================
Valid undef macro
==================

#undef abc

------------------

(source_file
  (macro
    (undef_macro
      (variable))))

==================
Invalid undef macro with too many parts
==================

#undef abc 2

------------------

(source_file
  (macro
    (undef_macro
      (variable)))
  (code
    (statement
      (expression
        (nular_expression
          (number))))))

==================
Valid include macro
==================

#include "abc"

------------------

(source_file
  (macro
    (include_macro
      (macro_path))))

==================
Valid include macro
==================

#include <abc>

------------------

(source_file
  (macro
    (include_macro
      (macro_path))))

==================
Invalid include macro with too many parts
==================

#include "abc" "def"

------------------

(source_file
  (macro
    (include_macro
      (macro_path)))
  (code
    (statement
      (expression
        (nular_expression
          (string))))))

==================
Invalid include macro with single quotes
:error
==================

#include 'abc'

------------------

==================
Invalid include macro with no quotes
:error
==================

#include abc

------------------

==================
Invalid include macro with escaped quotes
==================

#include "ab""c"

------------------

(source_file
  (macro
    (include_macro
      (macro_path)))
  (code
    (statement
      (expression
        (nular_expression
          (string))))))

==================
Valid ifdef macro
==================

#ifdef abc
def = 5;
#endif
def

------------------

(source_file
  (macro
    (ifdef_macro
      (variable)))
  (code
    (statement
      (assignment
        (variable)
        (expression
          (nular_expression
            (number)))))
    (macro
      (endif_macro))
    (statement
      (expression
        (nular_expression
          (variable))))))

==================
Valid empty ifdef macro
==================

#ifdef abc
#endif

------------------

(source_file
  (macro
    (ifdef_macro
      (variable)))
  (macro
    (endif_macro)))

==================
Valid ifdef else macro
==================

#ifdef abc
def = 5;
#else
def = 2;
#endif
def

------------------

(source_file
  (macro
    (ifdef_macro
      (variable)))
  (code
    (statement
      (assignment
        (variable)
        (expression
          (nular_expression
            (number)))))
    (macro
      (else_macro))
    (statement
      (assignment
        (variable)
        (expression
          (nular_expression
            (number)))))
    (macro
      (endif_macro))
    (statement
      (expression
        (nular_expression
          (variable))))))

==================
Valid empty ifdef else macro
==================

#ifdef abc
#else
#endif

------------------

(source_file
  (macro
    (ifdef_macro
      (variable)))
  (macro
    (else_macro))
  (macro
    (endif_macro)))

==================
Valid ifdef else macro inside statement
==================

def =
#ifdef abc
5
#else
2
#endif
;
def

------------------

(source_file
  (code
    (statement
      (assignment
        (variable)
        (macro
          (ifdef_macro
            (variable)))
        (expression
          (nular_expression
            (number)))
        (macro
          (else_macro))
        (expression
          (nular_expression
            (number)))))
    (macro
      (endif_macro))
    (statement
      (expression
        (nular_expression
          (variable))))))

==================
Invalid ifdef macro without variable
:error
==================

#ifdef
#endif

------------------

==================
Invalid ifdef macro with too many parts
==================

#ifdef abc def
#endif

------------------

(source_file
  (macro
    (ifdef_macro
      (variable)))
  (code
    (statement
      (expression
        (nular_expression
          (variable)))))
  (macro
    (endif_macro)))

==================
Valid ifndef macro
==================

#ifndef abc
def = 5;
#endif
def

------------------

(source_file
  (macro
    (ifndef_macro
      (variable)))
  (code
    (statement
      (assignment
        (variable)
        (expression
          (nular_expression
            (number)))))
    (macro
      (endif_macro))
    (statement
      (expression
        (nular_expression
          (variable))))))

==================
Invalid endif macro with too many parts
==================

#ifdef abc
#endif abc

------------------

(source_file
  (macro
    (ifdef_macro
      (variable)))
  (macro
    (endif_macro))
  (code
    (statement
      (expression
        (nular_expression
          (variable))))))

==================
Invalid else macro with too many parts
==================

#ifdef abc
#else abc
#endif

------------------

(source_file
  (macro
    (ifdef_macro
      (variable)))
  (macro
    (else_macro))
  (code
    (statement
      (expression
        (nular_expression
          (variable)))))
  (macro
    (endif_macro)))

==================
Valid if macro
==================

#if 7 == 7
def = 5;
#endif
def

------------------

(source_file
  (macro
    (if_macro
      (macro_expression)))
  (code
    (statement
      (assignment
        (variable)
        (expression
          (nular_expression
            (number)))))
    (macro
      (endif_macro))
    (statement
      (expression
        (nular_expression
          (variable))))))

==================
Valid multiline if macro
==================

#if 7 \
== 7
def = 5;
#endif
def

------------------

(source_file
  (macro
    (if_macro
      (macro_expression)))
  (code
    (statement
      (assignment
        (variable)
        (expression
          (nular_expression
            (number)))))
    (macro
      (endif_macro))
    (statement
      (expression
        (nular_expression
          (variable))))))

==================
Invalid multiline if macro
:error
==================

#if 7 
== 7
def = 5;
#endif
def

------------------

==================
Invalid if macro with no space
:error
==================

#if9 < 7
def = 5;
#endif
def

------------------

==================
Unknown macro
:error
==================

#unknown

------------------
